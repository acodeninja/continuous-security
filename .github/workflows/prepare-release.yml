name: prepare release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: get release version
        uses: actions/github-script@v6
        with:
          script: |
            const {title} = context.payload.pull_request;
            const [version] = title.match(/[0-9]+\.[0-9]+\.[0-9]+/);
            core.exportVariable('RELEASE_VERSION', version);

      - name: bump versions
        run: |
          echo "setting application version to $RELEASE_VERSION"
          cat application/package.json | jq -r ".version = \"$RELEASE_VERSION\"" > application/package.json.tmp
          mv application/package.json.tmp application/package.json
          for d in $(ls scanners/); do 
            [ $d = '_base' ] && continue
            echo "setting scanner / $d version to $RELEASE_VERSION"
            cat scanners/$d/package.json | jq -r ".version = \"$RELEASE_VERSION\"" > scanners/$d/package.json.tmp
            mv scanners/$d/package.json.tmp scanners/$d/package.json
          done

      - name: update package locks
        run: |
          echo "updating application package lock"
          cd application/
          npm install
          cd ..
          
          for d in $(ls scanners/); do 
            [ $d = '_base' ] && continue
            echo "updating scanner / $d package lock"
            cd scanners/$d
            npm install
            cd ../..
          done

      - name: commit changes
        run: |
          git add \
            application/package.json application/package-lock.json \
            scanners/*/package.json scanners/*/package-lock.json
          git config --global user.name "publisher [bot]"
          git config --global user.email "publisher@acode.ninja"
          git commit -m "chore: creating version $RELEASE_VERSION"
          git push

      - name: create draft release
        uses: actions/github-script@v6
        with:
          script: |
            const {owner, repo} = context.repo;
            const {RELEASE_VERSION} = process.env;
            
            await github.rest.repos.createRelease({
              owner,
              repo,
              name: `Release v${RELEASE_VERSION}`,
              tag_name: RELEASE_VERSION,
              generate_release_notes: true,
              draft: true,
            });
